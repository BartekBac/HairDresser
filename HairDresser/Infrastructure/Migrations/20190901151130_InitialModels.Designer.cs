// <auto-generated />
using System;
using Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(HairDresserDbContext))]
    [Migration("20190901151130_InitialModels")]
    partial class InitialModels
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview8.19405.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Client>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EntityImage<Client>");
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Opinion>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EntityImage<Opinion>");
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Salon>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EntityImage<Salon>");
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Worker>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("EntityId")
                        .IsUnique();

                    b.ToTable("EntityImage<Worker>");
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.ClientSalons", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClientId", "SalonId");

                    b.HasIndex("SalonId");

                    b.ToTable("ClientSalons");
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.VisitServices", b =>
                {
                    b.Property<Guid>("VisitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VisitId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("VisitServices");
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.WorkerServices", b =>
                {
                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WorkerId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("WorkerServices");
                });

            modelBuilder.Entity("Domain.Entities.Opinion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Opinions");
                });

            modelBuilder.Entity("Domain.Entities.Salon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.Visit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("Term")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalTime")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("WorkerId");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("Domain.Entities.Worker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Rating")
                        .HasColumnType("real");

                    b.Property<Guid>("SalonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("UserId");

                    b.ToTable("Workers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Client>", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.EntityImage<Domain.Entities.Client>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Opinion>", b =>
                {
                    b.HasOne("Domain.Entities.Opinion", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.EntityImage<Domain.Entities.Opinion>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Salon>", b =>
                {
                    b.HasOne("Domain.Entities.Salon", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.EntityImage<Domain.Entities.Salon>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.EntityImage<Domain.Entities.Worker>", b =>
                {
                    b.HasOne("Domain.Entities.Worker", "Entity")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Entities.EntityImage<Domain.Entities.Worker>", "EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.ClientSalons", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("FavoriteSalons")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Salon", "Salon")
                        .WithMany("Clients")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.VisitServices", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("VisitsHistory")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Visit", "Visit")
                        .WithMany("Services")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.ManyToMany.WorkerServices", b =>
                {
                    b.HasOne("Domain.Entities.Service", "Service")
                        .WithMany("Workers")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Worker", "Worker")
                        .WithMany("Services")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Opinion", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("SendOpinions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Worker", "Worker")
                        .WithMany("Opinions")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Salon", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.OwnsOne("Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("SalonId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("HouseNumber")
                                .HasColumnType("int");

                            b1.Property<string>("Street")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SalonId");

                            b1.ToTable("Salons");

                            b1.WithOwner()
                                .HasForeignKey("SalonId");
                        });

                    b.OwnsOne("Domain.ValueObjects.Schedule.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("SalonId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("SalonId");

                            b1.ToTable("Salons");

                            b1.WithOwner()
                                .HasForeignKey("SalonId");

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleSalonId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleSalonId");

                                    b2.ToTable("Salons");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleSalonId");
                                });
                        });
                });

            modelBuilder.Entity("Domain.Entities.Service", b =>
                {
                    b.HasOne("Domain.Entities.Salon", "Salon")
                        .WithMany("Services")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Visit", b =>
                {
                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany("Visits")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Worker", "Worker")
                        .WithMany("Visits")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Worker", b =>
                {
                    b.HasOne("Domain.Entities.Salon", "Salon")
                        .WithMany("Workers")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.OwnsOne("Domain.ValueObjects.Schedule.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("WorkerId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("WorkerId");

                            b1.ToTable("Workers");

                            b1.WithOwner()
                                .HasForeignKey("WorkerId");

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });

                            b1.OwnsOne("Domain.ValueObjects.Schedule.Day", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("ScheduleWorkerId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<TimeSpan>("Begin")
                                        .HasColumnType("time");

                                    b2.Property<TimeSpan>("End")
                                        .HasColumnType("time");

                                    b2.HasKey("ScheduleWorkerId");

                                    b2.ToTable("Workers");

                                    b2.WithOwner()
                                        .HasForeignKey("ScheduleWorkerId");
                                });
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
